#!/usr/bin/python3import datetime, time, mathfrom itertools import productfrom PIL import Imageimport RgbImageWindow, Converter"""           C6         ======        ||    ||    C1  ||    ||   C5        ||====||   <----C7 in the middle, C8 for dot separators        ||    ||    C2  ||    ||   C4         ======            C3"""COLORS = {    'C1': (234, 56, 46),    'C2': (20, 115, 251),    'C3': (140, 90, 207),    'C4': (255, 255, 255),    'C5': (99, 184, 77),    'C6': (255, 253, 56),    'C7': (252, 35, 215),    'C8': (234, 56, 46)}DIGITS = {    0: ['C1', 'C2', 'C3', 'C4', 'C5', 'C6'],    1: ['C5', 'C4'],    2: ['C6', 'C5', 'C7', 'C2', 'C3'],    3: ['C6', 'C5', 'C7', 'C4', 'C3'],    4: ['C1', 'C5', 'C7', 'C4'],    5: ['C6', 'C1', 'C7', 'C4', 'C3'],    6: ['C6', 'C1', 'C7', 'C2', 'C4', 'C3'],    7: ['C6', 'C5', 'C4'],    8: ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7'],    9: ['C1', 'C3', 'C4', 'C5', 'C6', 'C7']}TIME_MASKS = {}def calc_time_masks():    for digit in range(10):        colors = DIGITS[digit]        TIME_MASKS[digit] = []        for color in colors:            TIME_MASKS[digit].append(COLORS[color])def update_image(image):    data = image.load()    width, height = image.size    res_image = Image.new("RGB", (width, height))    res_data = res_image.load()    currentDT = datetime.datetime.now()    calc_time_masks()    time_dict = update_time_dict(currentDT)    for y, x in product(range(height), range(width)):        split(x, y, res_data, data, time_dict)    return res_imagedef split(x, y, res_data, data, time_dict):    res_data[x, y] = data[x, y]    if y > 80 and y < 280:        if x >= 0 and x <= 120:            res_data[x, y] = apply_digit(time_dict['h1'], data[x, y])        elif x >= 123 and x <= 230:            res_data[x, y] = apply_digit(time_dict['h2'], data[x, y])        elif x >= 288 and x <= 384:            res_data[x, y] = apply_digit(time_dict['m1'], data[x, y])        elif x >= 392 and x <= 492:            res_data[x, y] = apply_digit(time_dict['m2'], data[x, y])        elif x >= 560 and x <= 664:            res_data[x, y] = apply_digit(time_dict['s1'], data[x, y])        elif x >= 672 and x <= 780:            res_data[x, y] = apply_digit(time_dict['s2'], data[x, y])        elif (x >=231 and x <= 287) or (x >= 493 and x <= 559):            res_data[x, y] = apply_dot(time_dict['s2'] % 2 == 0, data[x, y])def apply_digit(digit, data):    rgb = data[:-1]    for each_color in TIME_MASKS[digit]:        if is_near(each_color, rgb):            return rgb    else:        return 0, 0, 0def apply_dot(show, data):    rgb = data[:-1]    if show:        return rgb    else:        return 0, 0, 0def update_time_dict(currentDT):    hour = currentDT.hour    minute = currentDT.minute    second = currentDT.second    # Format:     h1 h2  :  m1 m2  : s1 s2    res_dict = {        "h1": math.floor(hour / 10),        "h2": hour % 10,        "m1": math.floor(minute / 10),        "m2": minute % 10,        "s1": math.floor(second / 10),        "s2": second % 10,    }    return res_dictdef time_loop(image, window):    count = 0    max_count = 5    while count < max_count:        currentDT = datetime.datetime.now()        print(str(currentDT))        if True:            new_image = update_image(image)            Converter.show_in_window(new_image, window)            new_image.show()            time.sleep(0.2)        count += 1def start(file_name: str, image_window: RgbImageWindow):    img = Image.open(file_name)    # img.show()    time_loop(img, image_window)def is_near(color1, color2):    r1, g1, b1 = color1    r2, g2, b2 = color2    return abs(r1 - r2) + abs(g1 - g2) + abs(b1 - b2) < 15# https://pillow.readthedocs.io/en/stable/handbook/tutorial.html